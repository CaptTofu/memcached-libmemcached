General:

Makefile.PL:
    parse memcached.h to extract MEMCACHED_SUCCESS etc
        then use ExtUtils::Constant to generate the code for constant()
        Also write list of constants to a file for including in EXPORT_OK & _TAGS

Structure:
    Clever typemap code should be able to default undef <foo>_length parameter values
        to the length of the corresponding <foo> argument.
    Aim to be at least thread-safe and ideally thread-hot.
    Make return type a dual-var like $! with integer and string message parts.
        add tests for it

Tests:
    Need running memcached(s) to perform some tests
    Write a t/launch.pm that starts N memcached servers on localhost
    and returns their access details (ie ports).
    Use launch.pm in test scripts.
    Remember that we're not trying to test libmemcached itself!

Compatibility:
    Use flags field in a way compatible with Cache::Memcached?
        use constant F_STORABLE => 1;
        use constant F_COMPRESS => 2;
       +use constant F_UTF8     => 4; <= new patch from sugi@nemui.org
    We should certainly support UTF8 and using the same flag bit is sane
    (will reduce migration problems).

    Should we support automatic storable/compress or leave those to higher level code?
    Could support generic get & set key and get & set value callback hooks.
    Like BerkeleyDB filters: http://search.cpan.org/~pmqs/BerkeleyDB/BerkeleyDB.pod#DBM_Filters
    Write Cache::Memcached emulation and run its test suite.

Consider  memcached_fetch_execute API
    memcached_fetch_execute(memcached_st *ptr,
+                          unsigned int (*callback[])(memcached_st *ptr, memcached_result_st *result, void *context),
+                          void *context,
+                          unsigned int number_of_callbacks
+                         )

MEMCACHED_BEHAVIOR_USER_DATA needs free func

